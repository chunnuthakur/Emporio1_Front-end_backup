import React, { useState, useEffect } from "react";
import Banner from './Banner.png';
import logo from './autologo.png';
import './App.css';
import { FaStore, FaPhoneAlt, FaMapMarkerAlt, FaClock,} from 'react-icons/fa';
import { MdDirections } from "react-icons/md";
import { FaShare } from "react-icons/fa6";





const App = () => {
  const [states, setStates] = useState([]);
  const [cities, setCities] = useState([]);
  const [store, setstore] = useState([]);
  const [load, setload] = useState(false);
  const [searchmain, setSearchmain] = useState("");

  const [selectedState, setSelectedState] = useState(null);
  const [selectedCity, setSelectedCity] = useState(null);



  useEffect(() => {
    Getallstate();
  }, []);




// Handle state change
const handleStateChange1 = (e) => {
  const stateID = e.target.value;
  setSelectedState(stateID);
  handleSubmit(stateID); // Fetch cities

};

  // Search functions on clicking enter as well
  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault(); // Prevent default form submission (if needed)
      getStorebyState(); // Call the search function
    }
  };


  const Getallstate = async () => {
    fetch('https://emporio1-1blc.vercel.app/getallstate')
      .then(response => {
        if (!response.ok) {
          throw new Error('HTTP error! status: ${response.status}');
        }
        return response.json();
      })
      .then(data => {
        setStates(data);
      })
      .catch(err => {
        console.error('Error fetching states:', err);
      });
  };

  const handleSubmit = async (stateid) => {
    try {
      const response = await fetch('https://emporio1-1blc.vercel.app/getCitiesByState', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ state_id: stateid }),
      });

      if (!response.ok) {
        throw new Error('HTTP error! Status: ${response.status}');
      }

      const responseData = await response.json();
      setCities(responseData);
    } catch (error) {
      console.error('Error fetching cities:', error);
    }
  };

  const GetStore = async () => {
    if (!selectedCity) {
      alert('Please select a city before searching.');
      return;
    }

    setstore([]);
    setload(false);
    try {
      const response = await fetch('https://emporio1-1blc.vercel.app/getStore', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ cityid: selectedCity }),
      });

      if (!response.ok) {
        throw new Error('HTTP error! Status: ${response.status}');
      }

      const responseData = await response.json();
      setstore(responseData);
      setload(true);
    } catch (error) {
      console.error('Error fetching stores:', error);
    }
  };

  const getStorebyState = async () => {
    if (!searchmain.trim()) {
      alert('Please enter a location to search.');
      return;
    }

    setstore([]);
    setload(false);
    try {
      const response = await fetch('https://emporio1-1blc.vercel.app/getStorebyState', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ stateid: searchmain }),
      });

      if (response.status !== 200) {
        await GetStorebyname(searchmain);
      } else {
        const responseData = await response.json();
        setstore(responseData);
      }

      setload(true);
    } catch (error) {
      setload(true);
      console.error('Error fetching stores by state:', error);
    }
  };

  const GetStorebyname = async (data) => {
    setstore([]);
    try {
      const response = await fetch('https://emporio1-1blc.vercel.app/getStorebyname', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ cityname: data }),
      });

      if (!response.ok) {
        throw new Error('HTTP error! Status: ${response.status}');
      }

      const responseData = await response.json();
      setstore(responseData);
      setload(true);
    } catch (error) {
      console.error('Error fetching stores by name:', error);
    }
  };

  const handleStateChange = (e) => {
    const stateID = e.target.value;
    setSelectedState(stateID);
    handleSubmit(stateID);
  };

  const handleCityChange = (e) => {
    setSelectedCity(e.target.value);
  };

  const handleSearchInputChange = (e) => {
    setSearchmain(e.target.value);
  };





  
  const StoreCard = ({ store }) => {
    const phoneNumber = "7217014601"; // Update if dynamic
  
    // WhatsApp Share Link
    const whatsappShareLink = 'https://wa.me/?text=Check out this store: ${store.StoreName}%0A Address: ${store.StoreAdd}%0A Timings: 10:00 AM - 10:00 PM%0A Contact: ${phoneNumber}%0A Location: ${encodeURIComponent(store.StoreLoc)}';
  
  
  

    return (
      <div className="card">
        <img src={logo} alt="logo" />
  
        <div className="store-info">
          <div className="store-detail">
            <div className="store-item">
              <FaStore className="store-icon" /> {store.StoreName}
            </div>
            <div className="store-item">
              <FaMapMarkerAlt className="store-icon2" /> {store.StoreAdd}
            </div>
            <div className="store-item">
              <FaClock className="store-icon" /> 10:00 AM - 10:00 PM <p className="open">open</p>
            </div>
            <div className="store-item">
              <FaPhoneAlt className="store-icon" /> 
              <a href={'tel:${phoneNumber}'} className="phone-link">
                {phoneNumber}
              </a>
            </div>
          </div>
        </div>
  
        {/* Get Directions Button */}
        <a href={store.StoreLoc} target="_blank" rel="noopener noreferrer">
          <button className="locate-button">
            <div className="lol">
              <MdDirections />
            </div>
            Get Directions
          </button>
        </a>
  
        {/* Share Details Button */}
        <a href={whatsappShareLink} target="_blank" rel="noopener noreferrer">
          <button className="share-button">
            <div className="lol">
              <FaShare />
            </div>
            Share Details
          </button>
        </a>
      </div>
    );
  };
  return (
    <>
    
    
      <div className="c bg-white-400 text-black px-0 mr-0">
        <div className="Banner">
          <img src={Banner} alt="Banner" />
        </div>

        <div className="container">
          <h1 className="text-2xl sm:text-4xl md:text-5xl lg:text-5xl text-center font-bold mb-2 sm:mb-4 md:mb-6">
            CONNECT WITH YOUR NEAREST AUTOFORM STORE
          </h1>

          <div className="line border-0 dark:bg-yellow-400"></div>

          <div className="Search-bars">
            <div className="row">
              <div className="col">
                <select
                  className="form-select"
                  onChange={handleStateChange}
                  value={selectedState || ""}
                >
                  <option value="">Select State</option>
                  {states.map((state) => (
                    <option key={state.StateID} value={state.StateID}>
                      {state.StateName}
                    </option>
                  ))}
                </select>
              </div>
              <div className="col">
                <select
                  disabled={!selectedState}
                  className="form-select"
                  onChange={handleCityChange}
                  value={selectedCity || ""}
                >
                  <option value="">Select City</option>
                  {cities.map((city) => (
                    <option key={city.CityID} value={city.CityID}>
                      {city.CityName}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div id="btn">
              <button className="search" onClick={GetStore}>
                Search
              </button>
            </div>
          </div>
          <div className="line border-0 dark:bg-yellow-200"></div>
        </div>
      
      </div>


   

      { <div className="search-bar-container">
        <div className="search-form">
          <input
            type="text"
            className="search-input"
            placeholder="Enter location"
            value={searchmain}
            onChange={handleSearchInputChange}
               onKeyDown={(e) => {
        if (e.key === 'Enter') {
          getStorebyState();
        }
      }}
          />
          <button className="search-button" onClick={getStorebyState}>
            <i className="fas fa-search"></i>
          </button>
        </div>
      </div> }
      <div className="Par-all">
  <p>
        Autoform India Pvt. Ltd. is India’s leading manufacturer of premium seat covers, car accessories, and infotainment systems, 
      committed to enhancing comfort, style, and innovation. Our journey began in 1989 with high-quality seat cover production,
      leading to national expansion in 1999. In 2009, we registered ‘Autoform,’ setting new industry benchmarks. The launch of mats
      and car interior accessories in 2014 further expanded our offerings. With the opening of our first brand stores in Delhi NCR in 2016, 
      we accelerated growth—reaching 100 stores in Vijayawada by 2019 and 200 stores in Dehradun in 2022, marking Emporio’s first outlet.
      By 2024, we proudly crossed 350 stores, reinforcing our position as India’s premier automotive accessories brand.
      Visit our Autoform franchise stores nationwide to explore our top-quality products and upgrade your driving experience. 
      Find your nearest store today!
  </p>
</div>

         
      {load ? (
        <div
          style={{
            display: 'flex',
            flexWrap: 'wrap',
            justifyContent: 'center',
            alignItems: 'center',
            minHeight: '300px',
            textAlign: 'center',
          }}
        >
          {store?.length > 0 ? (
            store.map((storeItem) => (
              <StoreCard key={storeItem.StoreID} store={storeItem} />
            ))
          ) : (
            <h1 className="no-stores-message">No Stores are Available!</h1>
          )}
        </div>
      ) : null}
    </>
  );
};

export default App; 

